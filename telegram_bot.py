import logging
import wikipedia
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7606597523:AAEsP5mcWb7vSg971B3WT-p9pu92BzFBEDc"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
wikipedia.set_lang("ru")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–±–æ—Ç Mercedes-Benz!*

–Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º Mercedes-Benz!

*–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ Mercedes:*
‚Ä¢ "G-class" –∏–ª–∏ "–≥–µ–ª–∏–∫"
‚Ä¢ "S-class" –∏–ª–∏ "—ç—Å–∫–∞"
‚Ä¢ "E-class" –∏–ª–∏ "–µ—à–∫–∞" 
‚Ä¢ "C-class" –∏–ª–∏ "—Ü–µ—à–∫–∞"
‚Ä¢ "AMG" –∏–ª–∏ "–∞–º–µ–≥–∞"
‚Ä¢ "EQS" –∏–ª–∏ "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ä—Å–µ–¥–µ—Å"
‚Ä¢ "GLC" –∏–ª–∏ "–≥—ç–ª—ç—Å"
‚Ä¢ "GLE" –∏–ª–∏ "–≥—ç–ª—ç–µ"

*–¢–∞–∫–∂–µ –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å:*
‚Ä¢ –û–± –∏—Å—Ç–æ—Ä–∏–∏ Mercedes-Benz
‚Ä¢ –û —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö Mercedes
‚Ä¢ –û —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –º–æ–¥–µ–ª–µ–π
‚Ä¢ –û —Ü–µ–Ω–∞—Ö –∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è—Ö

*–Ø –Ω–∞–π–¥—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∂—É –≤–∞–º!*
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
def search_detailed_info(query):
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        search_variants = [
            f"Mercedes-Benz {query}",
            f"Mercedes {query}",
            query,
            f"{query} –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
            f"{query} Mercedes"
        ]
        
        for search_query in search_variants:
            try:
                search_results = wikipedia.search(search_query)
                if search_results:
                    page_title = search_results[0]
                    
                    # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    summary = wikipedia.summary(page_title, sentences=8)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    page = wikipedia.page(page_title)
                    
                    # –ò—â–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
                    image_url = None
                    for img in page.images[:10]:
                        if any(ext in img.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp']):
                            if any(keyword in img.lower() for keyword in ['car', 'vehicle', 'model', 'mercedes', 'auto']):
                                image_url = img
                                break
                    if not image_url and page.images:
                        for img in page.images:
                            if any(ext in img.lower() for ext in ['.jpg', '.jpeg', '.png']):
                                image_url = img
                                break
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
                    detailed_text = format_detailed_response(page_title, summary, page.url)
                    return detailed_text, image_url
                    
            except wikipedia.exceptions.DisambiguationError as e:
                # –ï—Å–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                if e.options:
                    page_title = e.options[0]
                    summary = wikipedia.summary(page_title, sentences=8)
                    page = wikipedia.page(page_title)
                    
                    image_url = None
                    for img in page.images[:5]:
                        if any(ext in img.lower() for ext in ['.jpg', '.jpeg', '.png']):
                            image_url = img
                            break
                    
                    detailed_text = format_detailed_response(page_title, summary, page.url)
                    return detailed_text, image_url
                    
            except wikipedia.exceptions.PageError:
                continue
            except Exception:
                continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ Wikipedia, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return get_fallback_info(query), None
        
    except Exception as e:
        logger.error(f"Search error: {e}")
        return get_fallback_info(query), None

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
def format_detailed_response(title, summary, url):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å–∫–æ–±–æ–∫
    import re
    clean_summary = re.sub(r'\[.*?\]', '', summary)
    clean_summary = re.sub(r'\(.*?\)', '', clean_summary)
    
    detailed_text = f"üîç *{title}*\n\n"
    detailed_text += f"{clean_summary}\n\n"
    detailed_text += f"üìñ *–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n{url}"
    
    return detailed_text

# –ó–∞–ø–∞—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ Wikipedia –Ω–µ –Ω–∞—à–µ–ª
def get_fallback_info(query):
    fallback_data = {
        'g-class': """üöô *Mercedes-Benz G-Class*

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–µ:

*–ò—Å—Ç–æ—Ä–∏—è:* –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å 1979 –≥–æ–¥–∞, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –Ω—É–∂–¥, –Ω–æ —Å—Ç–∞–ª —Å–∏–º–≤–æ–ª–æ–º —Ä–æ—Å–∫–æ—à–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞.

*–ü–æ–∫–æ–ª–µ–Ω–∏—è:*
‚Ä¢ W460 (1979-1991) - –ø–µ—Ä–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
‚Ä¢ W461 (1992-2018) - –≤–æ–µ–Ω–Ω–∞—è –∏ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è  
‚Ä¢ W463 (1990-–Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è) - –ª—é–∫—Å–æ–≤–∞—è –≤–µ—Ä—Å–∏—è

*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*
‚Ä¢ –ü—Ä–∏–≤–æ–¥: –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π 4MATIC
‚Ä¢ –î–≤–∏–≥–∞—Ç–µ–ª–∏: –æ—Ç 2.0L –¥–æ 4.0L V8
‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 585 –ª.—Å. (G63 AMG)
‚Ä¢ –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: 9-—Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è –ê–ö–ü–ü
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Ç—Ä–∏ –±–ª–æ–∫–∏—Ä—É–µ–º—ã—Ö –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª–∞, —Ä–∞–º–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

*–¶–µ–Ω—ã:* –æ—Ç 12 900 000 ‚ÇΩ –¥–æ 25 000 000 ‚ÇΩ –∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏""",

        's-class': """üöó *Mercedes-Benz S-Class*

–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–µ–¥–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏:

*–ü–æ–∫–æ–ª–µ–Ω–∏—è:*
‚Ä¢ W223 (2020-–Ω.–≤.) - —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π MBUX Hyperscreen
‚Ä¢ W222 (2013-2020) - —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç
‚Ä¢ W221 (2005-2013) - —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π
‚Ä¢ W220 (1998-2005) - –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π "–∂—É–∫"

*–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
‚Ä¢ DRIVE PILOT - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –≤–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ MAGIC BODY CONTROL - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞
‚Ä¢ ENERGIZING Comfort - —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞
‚Ä¢ Rear-seat entertainment - —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–Ω–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤

*–î–≤–∏–≥–∞—Ç–µ–ª–∏:* –æ—Ç S350d –¥–æ S680 —Å –º–æ—â–Ω–æ—Å—Ç—å—é –¥–æ 612 –ª.—Å.

*–¶–µ–Ω—ã:* –æ—Ç 8 900 000 ‚ÇΩ –¥–æ 18 000 000 ‚ÇΩ""",

        'e-class': """üöò *Mercedes-Benz E-Class*

–ë–∏–∑–Ω–µ—Å-—Å–µ–¥–∞–Ω, –∏–¥–µ–∞–ª—å–Ω–æ —Å–æ—á–µ—Ç–∞—é—â–∏–π –∫–æ–º—Ñ–æ—Ä—Ç –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:

*–ü–æ–∫–æ–ª–µ–Ω–∏—è:*
‚Ä¢ W214 (2023-–Ω.–≤.) - –Ω–æ–≤–µ–π—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
‚Ä¢ W213 (2016-2023) - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º–æ–¥–µ–ª—å —Å –¥–≤–æ–π–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
‚Ä¢ W212 (2009-2016) - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω
‚Ä¢ W211 (2002-2009) - —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É–∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –≤–æ–∂–¥–µ–Ω–∏—è
‚Ä¢ –î–≤–æ–π–Ω–æ–π —à–∏—Ä–æ–∫–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –¥–∏—Å–ø–ª–µ–π
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —Å–∏–¥–µ–Ω—å—è —Å –ø–æ–¥–æ–≥—Ä–µ–≤–æ–º –∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–µ–π

*–ö—É–∑–æ–≤–∞:* —Å–µ–¥–∞–Ω, —É–Ω–∏–≤–µ—Ä—Å–∞–ª, –∫—É–ø–µ, –∫–∞–±—Ä–∏–æ–ª–µ—Ç

*–¶–µ–Ω—ã:* –æ—Ç 5 200 000 ‚ÇΩ –¥–æ 9 500 000 ‚ÇΩ"""
    }
    
    query_lower = query.lower()
    for key, value in fallback_data.items():
        if key in query_lower:
            return value
    
    return f"üîç *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'*\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –¥–∏–ª–µ—Ä—É Mercedes-Benz."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    
    if user_message.startswith('/'):
        return
    
    await update.message.reply_text("üîç *–ò—â—É –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...*", parse_mode='Markdown')
    
    info_text, image_url = search_detailed_info(user_message)
    
    if image_url:
        try:
            await update.message.reply_photo(
                photo=image_url,
                caption=info_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Image error: {e}")
            await update.message.reply_text(info_text, parse_mode='Markdown')
    else:
        await update.message.reply_text(info_text, parse_mode='Markdown')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
        
        print("ü§ñ –ò–ò-–±–æ—Ç Mercedes –∑–∞–ø—É—â–µ–Ω!")
        print("‚úÖ –î–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()