import logging
import wikipedia
import requests
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7606597523:AAEsP5mcWb7vSg971B3WT-p9pu92BzFBEDc"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –í–∏–∫–∏–ø–µ–¥–∏–∏
wikipedia.set_lang("ru")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üß† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!*

–Ø –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ *–ß–ï–ú –£–ì–û–î–ù–û* –≤ Wikipedia –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç!

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∞—Ö, –≥–æ—Ä–æ–¥–∞—Ö, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö –ª—é–¥—è—Ö, –Ω–∞—É–∫–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ —Ç–µ–º–µ

*–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –õ–Æ–ë–û–ô –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º—É!*

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ Tesla Model S"
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã?"
‚Ä¢ "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –ü—É—Ç–∏–Ω–∞"
‚Ä¢ "–ò—Å—Ç–æ—Ä–∏—è –î—Ä–µ–≤–Ω–µ–≥–æ –†–∏–º–∞"
‚Ä¢ "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?"
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ò–ò-–±–æ—Ç–∞*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –õ–Æ–ë–û–ô –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º—É, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia!

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ú–∞—à–∏–Ω—ã Mercedes"
‚Ä¢ "–°–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" 
‚Ä¢ "–í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞"
‚Ä¢ "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω"
‚Ä¢ "–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞"
‚Ä¢ "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"

*–Ø –ø–æ–Ω–∏–º–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–∞—à –≤–æ–ø—Ä–æ—Å!*
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
def smart_wikipedia_search(query):
    try:
        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
        clean_query = clean_user_query(query)
        
        # –ò—â–µ–º –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
        search_results = wikipedia.search(clean_query)
        
        if not search_results:
            return None, None
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        page_title = search_results[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page = wikipedia.page(page_title)
        summary = wikipedia.summary(page_title, sentences=6)
        
        # –ò—â–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        image_url = find_best_image(page.images)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        formatted_text = format_wikipedia_text(summary, page_title, page.url)
        
        return formatted_text, image_url
        
    except wikipedia.exceptions.DisambiguationError as e:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        options = e.options[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        options_text = "\n".join([f"‚Ä¢ {opt}" for opt in options])
        text = f"ü§î *–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è \"{query}\":*\n\n{options_text}\n\n*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!*"
        return text, None
        
    except wikipedia.exceptions.PageError:
        return f"‚ùå *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Wikipedia.*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å —Ç–µ–º—É.", None
        
    except Exception as e:
        logger.error(f"Search error: {e}")
        return f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.", None

# –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
def clean_user_query(query):
    # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –ª–∏—à–Ω–∏–µ —Ñ—Ä–∞–∑—ã
    stop_words = ['—Ä–∞—Å—Å–∫–∞–∂–∏', '–ø—Ä–æ', '–æ', '–æ–±', '—á—Ç–æ', '—Ç–∞–∫–æ–µ', '–∫—Ç–æ', '—Ç–∞–∫–æ–π', '–∫–∞–∫', '—Ä–∞–±–æ—Ç–∞–µ—Ç', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–Ω–∞–π–¥–∏']
    
    words = query.lower().split()
    clean_words = [word for word in words if word not in stop_words and len(word) > 2]
    
    return ' '.join(clean_words) if clean_words else query

# –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
def find_best_image(images):
    if not images:
        return None
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    for img_url in images:
        img_lower = img_url.lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if any(ext in img_lower for ext in ['.jpg', '.jpeg', '.png', '.webp']):
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            if any(keyword in img_lower for keyword in ['photo', 'image', 'picture', 'main', 'featured']):
                return img_url
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
    for img_url in images:
        if any(ext in img_url.lower() for ext in ['.jpg', '.jpeg', '.png', '.webp']):
            return img_url
    
    return None

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏
def format_wikipedia_text(text, title, url):
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    clean_text = re.sub(r'\[.*?\]', '', text)
    clean_text = re.sub(r'\(.*?\)', '', clean_text)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    formatted_text = f"üîç *{title}*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    formatted_text += f"{clean_text}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é
    formatted_text += f"üìñ *–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç—å—è –≤ Wikipedia:*\n{url}"
    
    return formatted_text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if user_message.startswith('/'):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
    await update.message.reply_text("ü§î *–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia...*", parse_mode='Markdown')
    
    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info_text, image_url = smart_wikipedia_search(user_message)
    
    if info_text:
        if image_url:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
                await update.message.reply_photo(
                    photo=image_url,
                    caption=info_text,
                    parse_mode='Markdown'
                )
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {user_message}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
                await update.message.reply_text(info_text, parse_mode='Markdown')
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏
            await update.message.reply_text(info_text, parse_mode='Markdown')
    else:
        error_text = """
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!*

*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
‚Ä¢ –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –Ω–æ–≤–∞—è –∏–ª–∏ —É–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Wikipedia

*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å —Ç–µ–º—É

*–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—á–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ò–ª–æ–Ω –ú–∞—Å–∫"
‚Ä¢ "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏" 
‚Ä¢ "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤"
‚Ä¢ "–ö–ª–∏–º–∞—Ç –ó–µ–º–ª–∏"
‚Ä¢ "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        """
        await update.message.reply_text(error_text, parse_mode='Markdown')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        print("=" * 60)
        print("üß† –ò–ò-–ë–û–¢ –° –ò–°–ö–£–°–°–¢–í–ï–ù–ù–´–ú –ò–ù–¢–ï–õ–õ–ï–ö–¢–û–ú –ó–ê–ü–£–©–ï–ù!")
        print("‚úÖ –ú–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –õ–Æ–ë–´–ï –≤–æ–ø—Ä–æ—Å—ã")
        print("‚úÖ –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia")
        print("‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        print("‚úÖ –ü–æ–Ω–∏–º–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫")
        print("=" * 60)
        
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    main()