import logging
import wikipediaapi
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7606597523:AAEsP5mcWb7vSg971B3WT-p9pu92BzFBEDc"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Mercedes-Benz!*

–Ø –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–π –º–æ–¥–µ–ª–∏ Mercedes!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:
‚Ä¢ G-class
‚Ä¢ S-class  
‚Ä¢ EQS
‚Ä¢ C-class
‚Ä¢ AMG

*–ü—Ä–∏–º–µ—Ä:* –Ω–∞–ø–∏—à–∏—Ç–µ `S-class` –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def search_mercedes_info(model_name):
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_variants = [
            f"Mercedes-Benz {model_name}",
            f"Mercedes {model_name}",
            model_name,
            f"{model_name} (Mercedes-Benz)"
        ]
        
        for search_query in search_variants:
            try:
                # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è URL
                import urllib.parse
                encoded_query = urllib.parse.quote(search_query)
                
                url = f"https://ru.wikipedia.org/api/rest_v1/page/summary/{encoded_query}"
                response = requests.get(url, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    title = data.get('title', '')
                    summary = data.get('extract', '')
                    
                    if summary and "–º–µ—Ä—Å–µ–¥–µ—Å" in summary.lower() or "mercedes" in summary.lower():
                        image_url = data.get('thumbnail', {}).get('source') if data.get('thumbnail') else None
                        
                        info_text = f"üîç *{title}*\n\n{summary}\n\nüìñ *–ò—Å—Ç–æ—á–Ω–∏–∫: Wikipedia*"
                        return info_text, image_url
                        
            except Exception as e:
                continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        return get_fallback_info(model_name), None
        
    except Exception as e:
        logger.error(f"Search error: {e}")
        return get_fallback_info(model_name), None

# –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –µ—Å–ª–∏ Wikipedia –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
def get_fallback_info(model_name):
    info_dict = {
        'G-Class': """üöô *Mercedes-Benz G-Class*

–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –∫–ª–∞—Å—Å–∞ ¬´–ª—é–∫—Å¬ª, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å 1979 –≥–æ–¥–∞. –ò–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º –∫—É–ª—å—Ç–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –≤—ã–¥–∞—é—â–µ–π—Å—è –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å—é.

‚Ä¢ –ü–æ–∫–æ–ª–µ–Ω–∏—è: W460, W461, W463
‚Ä¢ –ü—Ä–∏–≤–æ–¥: –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Ä–∞–º–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, —Ç—Ä–∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª–∞""",

        'S-Class': """üöó *Mercedes-Benz S-Class*

–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–µ–¥–∞–Ω –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞, —ç—Ç–∞–ª–æ–Ω —Ä–æ—Å–∫–æ—à–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏.

‚Ä¢ –ü–æ–∫–æ–ª–µ–Ω–∏—è: W223, W222, W221, W220
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞, –º–∞—Å—Å–∞–∂–Ω—ã–µ –∫—Ä–µ—Å–ª–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è MBUX""",

        'E-Class': """üöò *Mercedes-Benz E-Class*

–ë–∏–∑–Ω–µ—Å-—Å–µ–¥–∞–Ω, –∏–¥–µ–∞–ª—å–Ω–æ —Å–æ—á–µ—Ç–∞—é—â–∏–π –∫–æ–º—Ñ–æ—Ä—Ç, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç–∏–ª—å.

‚Ä¢ –ü–æ–∫–æ–ª–µ–Ω–∏—è: W214, W213, W212
‚Ä¢ –ö–ª–∞—Å—Å: –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å""",

        'C-Class': """üöñ *Mercedes-Benz C-Class*

–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–¥–∞–Ω –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Å—Ç–∏–ª—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

‚Ä¢ –ü–æ–∫–æ–ª–µ–Ω–∏—è: W206, W205
‚Ä¢ –ö–ª–∞—Å—Å: –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–π""",

        'EQS': """‚ö° *Mercedes-Benz EQS*

–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ EVA2 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞.

‚Ä¢ –ó–∞–ø–∞—Å —Ö–æ–¥–∞: –¥–æ 770 –∫–º
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Hyperscreen, –∞–≤—Ç–æ–ø–∏–ª–æ—Ç
‚Ä¢ –ö–ª–∞—Å—Å: –ª—é–∫—Å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å""",

        'AMG': """üèéÔ∏è *Mercedes-AMG*

–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π Mercedes-Benz.

‚Ä¢ –û—Å–Ω–æ–≤–∞–Ω: 1967 –≥–æ–¥
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: handcrafted engines, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    }
    
    return info_dict.get(model_name, f"üîç *Mercedes {model_name}*\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower().strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if user_message.startswith('/'):
        return
    
    # –°–ª–æ–≤–∞—Ä—å –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    mercedes_models = {
        'g-class': 'G-Class', 'g class': 'G-Class', 'gclass': 'G-Class',
        's-class': 'S-Class', 's class': 'S-Class', 'sclass': 'S-Class',
        'e-class': 'E-Class', 'e class': 'E-Class', 'eclass': 'E-Class',
        'c-class': 'C-Class', 'c class': 'C-Class', 'cclass': 'C-Class',
        'eqs': 'EQS', 'amg': 'AMG', '–º–µ—Ä—Å–µ–¥–µ—Å': 'S-Class'
    }
    
    # –ò—â–µ–º –º–æ–¥–µ–ª—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    detected_model = None
    for key, value in mercedes_models.items():
        if key in user_message:
            detected_model = value
            break
    
    if detected_model:
        await update.message.reply_text("üîç *–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...*", parse_mode='Markdown')
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text, image_url = search_mercedes_info(detected_model)
        
        if image_url:
            try:
                await update.message.reply_photo(
                    photo=image_url, 
                    caption=info_text[:1020],
                    parse_mode='Markdown'
                )
            except Exception as e:
                await update.message.reply_text(info_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(info_text, parse_mode='Markdown')
            
    else:
        help_message = """
üöó *–Ø –Ω–µ –Ω–∞—à–µ–ª –º–æ–¥–µ–ª—å Mercedes –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!*

*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:*
‚Ä¢ `G-class` - –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫
‚Ä¢ `S-class` - —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–µ–¥–∞–Ω  
‚Ä¢ `E-class` - –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å
‚Ä¢ `C-class` - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–π
‚Ä¢ `EQS` - —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å
‚Ä¢ `AMG` - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
        """
        await update.message.reply_text(help_message, parse_mode='Markdown')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
        
        print("ü§ñ –ë–æ—Ç Mercedes –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚úÖ /start - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()