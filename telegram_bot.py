import logging
import wikipedia
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7606597523:AAEsP5mcWb7vSg971B3WT-p9pu92BzFBEDc"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
wikipedia.set_lang("ru")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üöó *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–±–æ—Ç Mercedes-Benz!*

–Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º Mercedes-Benz!

*–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ Mercedes:*
‚Ä¢ "G-class" –∏–ª–∏ "–≥–µ–ª–∏–∫"
‚Ä¢ "S-class" –∏–ª–∏ "—ç—Å–∫–∞"
‚Ä¢ "E-class" –∏–ª–∏ "–µ—à–∫–∞" 
‚Ä¢ "C-class" –∏–ª–∏ "—Ü–µ—à–∫–∞"
‚Ä¢ "AMG" –∏–ª–∏ "–∞–º–µ–≥–∞"
‚Ä¢ "EQS" –∏–ª–∏ "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ä—Å–µ–¥–µ—Å"
‚Ä¢ "GLC" –∏–ª–∏ "–≥—ç–ª—ç—Å"
‚Ä¢ "GLE" –∏–ª–∏ "–≥—ç–ª—ç–µ"

*–¢–∞–∫–∂–µ –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å:*
‚Ä¢ –û–± –∏—Å—Ç–æ—Ä–∏–∏ Mercedes-Benz
‚Ä¢ –û —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö Mercedes
‚Ä¢ –û —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –º–æ–¥–µ–ª–µ–π
‚Ä¢ –û —Ü–µ–Ω–∞—Ö –∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è—Ö

*–Ø –Ω–∞–π–¥—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∂—É –≤–∞–º!*
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

# –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Mercedes
def search_mercedes_info(query):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º Mercedes-Benz –∫ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        search_query = f"Mercedes-Benz {query}"
        search_results = wikipedia.search(search_query)
        
        if not search_results:
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ Mercedes-Benz
            search_results = wikipedia.search(query)
            if not search_results:
                return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", None
        
        page_title = search_results[0]
        summary = wikipedia.summary(page_title, sentences=5)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        page = wikipedia.page(page_title)
        image_url = None
        for img in page.images[:5]:
            if any(ext in img.lower() for ext in ['.jpg', '.jpeg', '.png']):
                image_url = img
                break
        
        info_text = f"üîç *{page_title}*\n\n{summary}\n\n*–ò—Å—Ç–æ—á–Ω–∏–∫: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ*"
        return info_text, image_url
        
    except wikipedia.exceptions.DisambiguationError as e:
        options = "\n".join([f"‚Ä¢ {opt}" for opt in e.options[:5]])
        return f"ü§î –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n{options}\n\n*–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!*", None
        
    except wikipedia.exceptions.PageError:
        return f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    
    if user_message.startswith('/'):
        return
    
    await update.message.reply_text("üîç *–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...*", parse_mode='Markdown')
    
    info_text, image_url = search_mercedes_info(user_message)
    
    if image_url:
        try:
            await update.message.reply_photo(
                photo=image_url,
                caption=info_text,
                parse_mode='Markdown'
            )
        except:
            await update.message.reply_text(info_text, parse_mode='Markdown')
    else:
        await update.message.reply_text(info_text, parse_mode='Markdown')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))
        
        print("ü§ñ –ò–ò-–±–æ—Ç Mercedes –∑–∞–ø—É—â–µ–Ω!")
        print("‚úÖ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ Mercedes")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()